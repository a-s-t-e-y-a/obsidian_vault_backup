{
	"nodes":[
		{"id":"fd2bfabf6424982a","x":-125,"y":-30,"width":585,"height":230,"color":"1","type":"text","text":"Struct Socket\n1. its is general BSD socket \n2. it contains pointer to two important fields\n3. **ops** and **sk**\n4. now ops is for protocol specific operations\n5. sk is for kernel representation INET socket representation\n6. file descriptor is user based that actually makes the connection"},
		{"id":"5deed938ff6d50e1","x":-120,"y":240,"width":780,"height":340,"color":"4","type":"text","text":"Struct Sock\n\n1. Now we have seen that struct socket provide two pointer sk and ops and sk is one of the pointer that points to this struct sock \n2. struct sock contains INET socket means its doesnt matter that connection is TCP or UDP  it contains general info of the system\n3. it contains info about connection status\n4. it most of the field start with sk__\n5. sk_socket points  towards struct socket\n6. sk_protocol tells if it is UDP or TCP\n7. sk_type tells which stream it is SOCK_STREAM or SOCK_DGRAM\n"},
		{"id":"ed607c4e78d14f8f","x":-120,"y":600,"width":780,"height":360,"type":"text","text":"Struct_proto_ops\n\n1. This contains protocol specific functions\n2. struct_socket gives you front door interface and struct sock contains all the general representation but protocol specific functions are in struct_proto_ops\n3. like we use sendmsg from struct socket but which protocol send message has to be used lie in this struct_proto_ops\n4. ops pointer from struct socket points to this struct_proto_ops\n5. its **initialization** happens in __sock_create() function  . every protocol has its own function\n6. when i use sock->ops->bind() its calls this function for specific protocol \n7. "}
	],
	"edges":[]
}